openapi: 3.0.2
info:
  description: "Api reference for Sports"
  version: "0.3.3"
  title: "Swagger Sports"
  termsOfService: "https://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: "User"
    description: "Operations about user"
  - name: "Routes"
    description: "Route management"
  - name: "Sports"
    description: "Sports management."
  - name: "Activities"
    description: "Activity management."
servers:
  - url: http://localhost:9000/api
    description: Local Server
paths:
  /users/{uid}:
    get:
      tags:
        - "User"
      summary: "Get user by user ID"
      description: "Gets a user by it's identifier"
      operationId: "getUserByID"
      parameters:
        - name: "uid"
          in: "path"
          description: "User's identifier."
          required: true
          schema:
            type: "integer"
          example: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /login:
    post:
      tags:
        - "User"
      summary: "Login"
      description: "Gets a token for a user with the given email"
      operationId: "gettokenbyemail"
      requestBody:
        description: "Email of a user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthInput"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthOutput"
        "400":
          description: "Invalid username supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /sports/{sid}/users:
    get:
      tags:
        - "User"
      summary: "Get users by an sid and rid"
      description: "Gets a list of users having an Activity with the given sportID and routeID, the list is ordered ascendingly by Activity duration"
      operationId: "getUsersByActivity"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 0
        - name: "rid"
          in: "query"
          description: "Route's identifier."
          required: true
          schema:
            type: "integer"
          example: 0
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0

      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "Users not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /users:
    get:
      tags:
        - "User"
      summary: "Get all the users"
      description: "Gets all the users"
      operationId: "getUsers"
      parameters:
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
    post:
      tags:
        - "User"
      summary: "Add a new user"
      description: "Adds a new user with the given name and email and returns its identifier and auth token"
      operationId: "addUser"
      requestBody:
        description: "Name and Email to attribute to the user."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationBody"
      responses:
        "201":
          description: "A user has been sucessfully created!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreationResponse"
        "400":
          description: "A parameter is missing or is incorrect"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /routes:
    get:
      tags:
        - "Routes"
      summary: "Get routes"
      description: "Gets all the routes if no search parameters are given, otherwise gets the routes that match the given parameters"
      operationId: "getRoutes"
      parameters:
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "startLocation"
          in: "query"
          description: "a location to search for"
          required: false
          schema:
            type: "string"
          example: "Lisboa"
        - name: "endLocation"
          in: "query"
          description: "a location to search for"
          required: false
          schema:
            type: "string"
          example: "Porto"
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteList"
    post:
      tags:
        - "Routes"
      summary: "Add a new route"
      description: "Adds a route"
      security:
        - bearerAuth: [ ]
      operationId: "addRoute"
      requestBody:
        description: "start location, end location and distance to attribute to a route"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteCreationBody"
      responses:
        "201":
          description: "A route has been sucessfully created!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteCreationResponse"
        "400":
          description: "A parameter is missing or is incorrect"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /routes/{rid}:
    get:
      tags:
        - "Routes"
      summary: "Get route by route ID"
      description: "Gets a route by it's identifier"
      operationId: "getRouteByID"
      parameters:
        - name: "rid"
          in: "path"
          description: "Route's identifier."
          required: true
          schema:
            type: "integer"
          example: "10"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        "404":
          description: "Route not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      tags:
        - "Routes"
      summary: "Update route by route ID"
      description: "Updates a route by it's identifier"
      operationId: "updateRouteByID"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "rid"
          in: "path"
          description: "Route's identifier."
          required: true
          schema:
            type: "integer"
          example: "10"
      requestBody:
        description: "Route's new information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Route"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
        "404":
          description: "Route not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /sports:
    get:
      tags:
        - "Sports"
      summary: "Get all sports"
      description: "Gets all the sports."
      operationId: "getsports"
      parameters:
        - name: "search"
          in: "query"
          description: "The text introduced for search purposes"
          required: false
          schema:
            type: "string"
          example: "football"
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SportList"
    post:
      tags:
        - "Sports"
      summary: "Create a sport"
      description: "Create a sport with a name and description"
      security:
        - bearerAuth: [ ]
      operationId: "createsport"
      requestBody:
        description: "start location, end location and distance to attribute to a route"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SportCreationBody"
      responses:
        "200":
          description: "Sport created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SportIDResponse"
        "400":
          description: "A required parameter is missing or is incorrect"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /sports/{sid}/activities/{aid}:
    get:
      tags:
        - "Activities"
      summary: "Get an activity"
      description: "Gets an activity associated to the given id"
      parameters:
        - name: "aid"
          in: "path"
          description: "Activity's identifier."
          required: true
          schema:
            type: "integer"
          example: "1234"
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: "1234"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "403":
          description: "token doesn't belong to the user that created the activity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "404":
          description: "Activity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      tags:
        - "Activities"
      summary: "Update an activity"
      description: "Updates an activity by id"
      security:
        - bearerAuth: [ ]
      operationId: "updateactivity"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 123
        - name: "aid"
          in: "path"
          description: "Activity's identifier."
          required: true
          schema:
            type: "integer"
            example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityCreationBody"
      responses:
        "204":
          description: "Successfull operation"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "403":
          description: "Token doesn't belong to the user that created the activity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "404":
          description: "Activity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      tags:
        - "Activities"
      summary: "Delete an activity"
      description: "Deletes an activity by id"
      security:
        - bearerAuth: []
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: "1234154"
        - name: "aid"
          in: "path"
          description: "Activity's identifier."
          required: true
          schema:
            type: "integer"
          example: 89
      responses:
        "204":
          description: "Activity deleted successfully"
        "404":
          description: "Sport or Activity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "401":
          description: "Invalid, missing token or token not belonging to the user that created the activity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /sports/{sid}/activities:
    post:
      tags:
        - "Activities"
      summary: "Create an activity"
      description: "Creates a new activity associated to a sport"
      security:
        - bearerAuth: []
      requestBody:
        description: "duration (format: hh:mm:ss.fff), date and route id(optional) to be attributed to an activity"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityCreationBody"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 34
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityIDResponse"
        "400":
          description: "A required parameter is missing or is incorrect"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    get:
      tags:
        - "Activities"
      summary: "Get a list of activities"
      description: "Gets the activities that the sports match the given id"
      operationId: "getActivities"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 67
        - name: "rid"
          in: query
          description: "Route's identifier."
          required: false
          schema:
            type: "integer"
          example: 45
        - name: "date"
          in: query
          description: "Date."
          required: false
          schema:
            type: "string"
          example: "2002-12-31"
        - name: "orderBy"
          in: query
          description: "order method."
          required: true
          schema:
            type: "string"
          example: "ascending or descending"
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityList"
        "400":
          description: "A required parameter is missing or is incorrect"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      tags:
        - "Activities"
      summary: "Deletes a list of activities"
      description: "Deletes a list of activties by their IDs. This operation is atomic."
      security:
        - bearerAuth: []
      operationId: "deleteActivities"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 67
        - name: "activityIDs"
          in: "query"
          description: "A list of activity IDs split by commas"
          required: true
          schema:
            type: "string"
          example: "12,31,2,3"
      responses:
        "204":
          description: "Activities deleted successfully"
        "404":
          description: "An Activity id was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
        "401":
          description: "Invalid, missing token or token not belonging to the user that created the activity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"

  /sports/{sid}:
    get:
      tags:
        - "Sports"
      summary: "Get a sport"
      description: "Gets a sport by id"
      operationId: "getsport"
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 123
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sport"
        "404":
          description: "Sport not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      tags:
        - "Sports"
      summary: "Updates a sport"
      description: "Updates a sport by id"
      operationId: "updatesport"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "sid"
          in: "path"
          description: "Sport's identifier."
          required: true
          schema:
            type: "integer"
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SportCreationBody"
      responses:
        "204":
          description: "sucessfull operation"
        "404":
          description: "Sport not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /users/{uid}/activities:
    get:
      tags:
        - "Activities"
      summary: "Get a list of activities from a user"
      description: "Gets the activities that the user match the given id"
      operationId: "getActivitiesfromuser"
      parameters:
        - name: "uid"
          in: "path"
          description: "User's identifier."
          required: true
          schema:
            type: "integer"
          example: 14
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityList"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /activities:
    get:
      tags:
        - "Activities"
      summary: "Gets all activities"
      description: "Gets all existing Activities"
      operationId: "geAllActivities"
      parameters:
        - name: "skip"
          in: "query"
          description: "The starting position of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
        - name: "limit"
          in: "query"
          description: "The length of the subsequence to return"
          required: false
          schema:
            type: "integer"
          example: 0
      responses:
        "200":
          description: "sucessfull operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityList"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    HttpError:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 2000
        message:
          type: "string"
          example: "Invalid parameter: email"
    User:
      type: "object"
      properties:
        name:
          type: "string"
          example: "guest"
        email:
          type: "string"
          example: "guest@gmail.com"
        id:
          type: "integer"
          example: 14
    UserList:
      type: "object"
      properties:
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/User"
    UserCreationBody:
      type: "object"
      properties:
        name:
          type: "string"
          example: "testUser"
        email:
          type: "string"
          example: "email@gmail.com"
    UserCreationResponse:
      type: "object"
      properties:
        authToken:
          type: "string"
          example: "10a3fa15-6c12-43d0-9112-caa7eddf3249"
        id:
          type: "integer"
          example: 45
    AuthInput:
      type: "object"
      properties:
        email:
          type: "string"
          example: "guest@email.com"
    AuthOutput:
      type: "object"
      properties:
        authToken:
          type: "string"
          example: "10a3fa15-6c12-43d0-9112-caa7eddf3249"
    Route:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 78
        startLocation:
          type: "string"
          example: "Lisboa"
        endLocation:
          type: "string"
          example: "Fátima"
        distance:
          type: "number"
          example: 20.0
        user:
          type: "integer"
          example: 45
    RouteList:
      type: "object"
      properties:
        routes:
          type: "array"
          items:
            $ref: "#/components/schemas/Route"
    RouteCreationBody:
      type: "object"
      properties:
        startLocation:
          type: "string"
          example: "Lisboa"
        endLocation:
          type: "string"
          example: "Fátima"
        distance:
          type: "number"
          example: 128.7
    RouteCreationResponse:
      type: "object"
      properties:
        routeID:
          type: "integer"
          example: 123
    Sport:
      type: "object"
      required:
        - id
        - name
        - user
      properties:
        id:
          type: "integer"
          example: 380
        name:
          type: "string"
          example: "Football"
        description:
          type: "string"
          example: "Game played with feet."
        user:
          type: "integer"
          example: 14
    SportList:
      type: "object"
      properties:
        sports:
          type: "array"
          items:
            $ref: "#/components/schemas/Sport"
    SportCreationBody:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
          example: "Football"
        description:
          type: "string"
          example: "Game played with feet."
    SportIDResponse:
      type: "object"
      properties:
        sportID:
          type: "integer"
          example: 12314
    Activity:
      type: "object"
      required:
        - id
        - date
        - duration
        - sport
        - user
      properties:
        id:
          type: "integer"
          example: 240
        date:
          type: "string"
          example: "2002-05-20"
        duration:
          type: "string"
          example: "02:10:32.123"
        sport:
          type: "integer"
          example: 56
        route:
          type: "integer"
          example: 25
        user:
          type: "integer"
          example: 24
    ActivityList:
      type: "object"
      properties:
        activities:
          type: "array"
          items:
            $ref: "#/components/schemas/Activity"
    ActivityCreationBody:
      type: "object"
      required:
        - duration
        - date
      properties:
        duration:
          type: "string"
          example: "10:10:10.555"
        date:
          type: "string"
          example: "2000-12-31"
        rid:
          type: "string"
          example: "123"
    ActivityIDResponse:
      type: "object"
      properties:
        activityID:
          type: "integer"
          example: 123141245