openapi: 3.0.0
info:
  description: "Api reference for Sports"
  version: "0.0.0"
  title: "Swagger Sports"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: "User"
    description: "Operations about user"
  - name: "Routes"
    description: "Route management"
  - name: "Sports and Activities"
    description: "Sports and Activity management."
servers:
  - url: http://localhost:9000/api
    description: Local Server
paths:
  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Get user by user ID"
      description: "Gets a user by it's identifier"
      operationId: "getUserByID"
      parameters:
        - name: "id"
          in: "path"
          description: "User's identifier. Use guestID for testing."
          required: true
          schema:
            type: "string"
          example: "guestID"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /users:
    get:
      tags:
        - "User"
      summary: "Get all the users"
      description: "Gets all the users"
      operationId: "getUsers"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
    post:
      tags:
        - "User"
      summary: "Add a new user"
      description: "Adds a new user with the given name and email and returns its identifier and auth token"
      operationId: "addUser"
      requestBody:
        description: "Name and Email to attribute to the user."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationBody"
      responses:
        "201":
          description: "A user has been sucessfully created!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserCreation"
        "400":
          description: "A parameter is missing or is incorrect"
    /routes:
      get:
        tags:
          - "Routes"
        summary: "Get all routes"
        description: "Gets all the routes."
        operationId: "getRoutes"
        responses:
          "200":
            description: "sucessfull operation"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/RouteList"
components:
  schemas:
    User:
      type: "object"
      properties:
        name:
          type: "string"
          example: "guest"
        email:
          type: "string"
          example: "guest@gmail.com"
        id:
          type: "string"
          example: "guestID"
    ResponseUserCreation:
      type: "object"
      properties:
        authToken:
          type: "string"
        id:
          type: "string"
    UserCreationBody:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
    UsersList:
      type: "object"
      properties:
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/User"
    Route:
      type: "object"
      properties:
        startLocation:
          type: "string"
          example: "Lisboa"
        endLocation:
          type: "string"
          example: "FÃ¡tima"
        duration:
          type: "number"
          format: "double"
    RouteList:
      type: "object"
      properties:
        routes:
          type: "array"
          items:
            $ref: "#components/schema/Route"
